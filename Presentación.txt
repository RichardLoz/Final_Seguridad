Diapositiva 1: Introducción
Texto: "Hoy voy a hablarles sobre un tipo de ataque muy conocido pero aún común: la inyección SQL. Este ataque ocurre cuando los sistemas no validan correctamente las entradas de los usuarios y permiten que un atacante manipule consultas SQL para acceder o destruir datos en la base de datos. Según OWASP, las inyecciones SQL son una de las principales vulnerabilidades en aplicaciones web. Para entender su impacto, podemos recordar el caso de LinkedIn en 2012, donde se filtraron millones de contraseñas debido a esta falla. ¡Así que comencemos a explorar cómo funcionan y cómo prevenirlas!"

Diapositiva 2: Consulta No Parametrizada
Texto: "Las consultas no parametrizadas son un error común en las aplicaciones inseguras. Básicamente, permiten que las entradas de los usuarios se incorporen directamente al código SQL. Por ejemplo, si el usuario ingresa su nombre de usuario y contraseña, el código genera algo como esto: SELECT * FROM users WHERE username = 'admin' AND password = 'password'. El problema surge si el usuario introduce un valor malicioso, como ' OR 1=1 --, que manipula la consulta. Esto puede hacer que la base de datos ignore las contraseñas y dé acceso al atacante. Es una vulnerabilidad peligrosa porque puede explotarse fácilmente."

Diapositiva 3: Consulta Parametrizada
Texto: "La solución a las consultas no parametrizadas son las consultas parametrizadas. Estas consultas separan la lógica SQL de los datos de entrada, evitando que un atacante pueda modificar la estructura de la consulta. Por ejemplo, en lugar de insertar directamente el texto ingresado por el usuario, usamos algo como esto: SELECT * FROM users WHERE username = ? AND password = ?. Los datos del usuario se envían como parámetros y no afectan la lógica de la consulta. Con esto, incluso si alguien intenta un ataque como ' OR 1=1 --, la base de datos lo tratará como texto y no como código."

Diapositiva 4: Entendiendo el Ataque ' OR 1=1 --
Texto: "Este es uno de los ejemplos más clásicos de inyección SQL: ' OR 1=1 --. Lo que hace es manipular la consulta para que la condición de validación siempre sea verdadera. Veamos cómo funciona: Supongamos que el código original valida el usuario y la contraseña. Si un atacante introduce ' OR 1=1 -- como nombre de usuario, la consulta se transforma en algo como SELECT * FROM users WHERE username = '' OR 1=1. Aquí, el 1=1 siempre es verdadero, y el -- ignora el resto de la consulta. Esto permite al atacante acceder sin necesidad de una contraseña válida. Es un ejemplo simple, pero muy potente."

Diapositiva 5: Casos Famosos de Inyección SQL
Texto: "Ahora, hablemos de casos reales para entender el impacto de este ataque. Uno de los más conocidos fue el de LinkedIn en 2012. Por una vulnerabilidad de inyección SQL, los atacantes accedieron a millones de contraseñas, muchas de ellas mal cifradas. Esto dañó la reputación de la empresa y puso en riesgo a sus usuarios. Otro ejemplo fue Heartland Payment Systems, donde se comprometieron datos de tarjetas de crédito de más de 100 millones de personas. Como ven, las inyecciones SQL no son solo un problema técnico; pueden tener consecuencias enormes para empresas y personas."

Diapositiva 6: Conclusiones y Mejores Prácticas
Texto: "Para cerrar, quiero destacar cómo podemos prevenir este tipo de ataques. Lo primero es siempre usar consultas parametrizadas, como vimos antes. También es crucial validar y limpiar las entradas de los usuarios, para asegurarnos de que contienen solo datos válidos. Otra buena práctica es aplicar el principio de mínimos privilegios: darle a las cuentas de la base de datos solo los permisos que realmente necesitan. Por último, herramientas como los Firewalls de Aplicaciones Web (WAF) pueden ayudar a detectar y bloquear estos intentos. En resumen, la inyección SQL es peligrosa, pero totalmente prevenible si seguimos buenas prácticas de seguridad."